
package Vista;

import java.awt.Dimension;
import static java.awt.EventQueue.invokeLater;
import java.awt.Point;
import static java.awt.Toolkit.getDefaultToolkit;
import java.awt.event.KeyEvent;
import static java.awt.event.KeyEvent.VK_BACK_SPACE;
import static java.awt.event.KeyEvent.VK_DELETE;
import static java.awt.event.KeyEvent.VK_TAB;
import static java.lang.Character.isDigit;
import static java.lang.Integer.parseInt;
import static java.lang.System.out;
import static java.util.logging.Level.SEVERE;
import static java.util.logging.Logger.getLogger;
import javax.swing.JComboBox;
import javax.swing.JTextField;
import static javax.swing.UIManager.getInstalledLookAndFeels;
import static javax.swing.UIManager.setLookAndFeel;


/**
 *
 * discName
   artistName
   discType
   releaseDate
   numberOfSongs
   price
   stock
 * @author chris
 */
public class MusicRecordFrame extends javax.swing.JFrame {
    private final Dimension SCREEN_SIZE = getDefaultToolkit().getScreenSize();
    private final Dimension FRAME_SIZE = new Dimension(620,450);
    private final String[] listDiscType = {"","Single", "EP", "Álbum", "Recopilación", "Live"};
    //private final Date firstAlbumReleaseDate = new Date(1_889,1,1,1,1,11);
    private final int[] listKeyCount = {0,0,0,0,0};
    
    /**
     * Creates new form MusicRecordFrame
     */
    public MusicRecordFrame() {

        initComponents();
        setDefaultTextWarning();
    }
    
    
    
    private Point getScreenCenter(){
        final int WIDTH_CENTER = (int)((SCREEN_SIZE.getWidth() - FRAME_SIZE.getWidth())/2);
        final int HEIGHT_CENTER = (int)((SCREEN_SIZE.getHeight() - FRAME_SIZE.getHeight())/2);
        final Point SCREEN_CENTER = new Point(WIDTH_CENTER, HEIGHT_CENTER);
        out.println("Se definió el centro de la pantalla");
        return SCREEN_CENTER;
    }
    private boolean validString(String text){
        return!(text.isEmpty() || text.isBlank());

    }
    
    private boolean validInt(int number){
        final int MAX_INT_VALUE = 2_147_483_647;
        return!(number<= 0 || number >= MAX_INT_VALUE);
        
    }
    
    private void setDefaultTextWarning(){
        discNameWarningLabel.setText("");
        artistNameWarningLabel.setText("");
        numberOfSongsWarningLabel.setText("");
        discTypeWarningLabel.setText("");
        releaseDateWarningLabel.setText("");
        priceWarningLabel.setText("");
        stockWarningLabel.setText("");
        out.println("Se definió las advertencias en blanco");
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        findByWindowFrame = new javax.swing.JFrame();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jComboBox1 = new javax.swing.JComboBox<>();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jCheckBox5 = new javax.swing.JCheckBox();
        jCheckBox6 = new javax.swing.JCheckBox();
        jCheckBox7 = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jToggleButton1 = new javax.swing.JToggleButton();
        jToggleButton2 = new javax.swing.JToggleButton();
        musicRecordPanel = new javax.swing.JPanel();
        discLabel = new javax.swing.JLabel();
        discNameTextField = new javax.swing.JTextField();
        discNameWarningLabel = new javax.swing.JLabel();
        artistLabel = new javax.swing.JLabel();
        artistNameTextField = new javax.swing.JTextField();
        artistNameWarningLabel = new javax.swing.JLabel();
        releaseDateLabel = new javax.swing.JLabel();
        numberOfSongsLabel = new javax.swing.JLabel();
        numberOfSongsTextField = new javax.swing.JTextField();
        numberOfSongsWarningLabel = new javax.swing.JLabel();
        discTypeLabel = new javax.swing.JLabel();
        discTypeComboBox = new JComboBox<>(listDiscType);
        discTypeWarningLabel = new javax.swing.JLabel();
        priceLabel = new javax.swing.JLabel();
        priceTextField = new javax.swing.JTextField();
        priceWarningLabel = new javax.swing.JLabel();
        stockLabel = new javax.swing.JLabel();
        stockTextField = new javax.swing.JTextField();
        stockWarningLabel = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        registerButton = new javax.swing.JButton();
        cleanFieldsButton = new javax.swing.JButton();
        releaseDateWarningLabel = new javax.swing.JLabel();
        jCalendar1 = new com.toedter.calendar.JCalendar();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        EditMenu = new javax.swing.JMenu();
        findDataEditMenu = new javax.swing.JMenu();
        editFindByDiscMenu = new javax.swing.JMenuItem();
        editFindByArtistMenu = new javax.swing.JMenuItem();
        editFindByDiscTypeMenu = new javax.swing.JMenuItem();
        editFindByCustomMenu = new javax.swing.JMenuItem();
        deleteMenu = new javax.swing.JMenu();
        findDataDeleteMenu = new javax.swing.JMenu();
        deleteFindByDiscMenu = new javax.swing.JMenuItem();
        deleteFindByArtistMenu = new javax.swing.JMenuItem();
        deleteFindByDiscTypeMenu = new javax.swing.JMenuItem();
        deleteFindByCustomMenu = new javax.swing.JMenuItem();

        findByWindowFrame.setEnabled(false);
        findByWindowFrame.setLocation(getScreenCenter());
        findByWindowFrame.setMaximumSize(new java.awt.Dimension(2147, 21474));
        findByWindowFrame.setMinimumSize(new java.awt.Dimension(650, 500));
        findByWindowFrame.setPreferredSize(new java.awt.Dimension(650, 500));

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jCheckBox1.setText("Disco");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jCheckBox2.setText("Artista");

        jCheckBox3.setText("Fecha de publicacion");
        jCheckBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox3ActionPerformed(evt);
            }
        });

        jCheckBox4.setText("Numero de canciones");

        jCheckBox5.setText("Tipo de disco");

        jCheckBox6.setText("Precio");

        jCheckBox7.setText("Stock");

        jLabel1.setText("Campos a:");

        jToggleButton1.setText("Atras");

        jToggleButton2.setText("Siguiente");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jCheckBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jCheckBox3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jCheckBox4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jCheckBox5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addComponent(jCheckBox7, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jCheckBox6, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jToggleButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jToggleButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(5, 5, 5)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jCheckBox1)
                                    .addComponent(jCheckBox2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jCheckBox3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jCheckBox4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jCheckBox5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jCheckBox6)
                                    .addComponent(jCheckBox7))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jToggleButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jToggleButton2)
                        .addGap(15, 15, 15))))
        );

        javax.swing.GroupLayout findByWindowFrameLayout = new javax.swing.GroupLayout(findByWindowFrame.getContentPane());
        findByWindowFrame.getContentPane().setLayout(findByWindowFrameLayout);
        findByWindowFrameLayout.setHorizontalGroup(
            findByWindowFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        findByWindowFrameLayout.setVerticalGroup(
            findByWindowFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        findByWindowFrame.getAccessibleContext().setAccessibleDescription("");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Registro de discos");
        setLocation(getScreenCenter());
        setMinimumSize(new java.awt.Dimension(620, 420));
        setName("musicRecordFrame"); // NOI18N
        setResizable(false);
        setSize(new java.awt.Dimension(620, 420));

        musicRecordPanel.setMaximumSize(new java.awt.Dimension(3276, 3276));

        discLabel.setText("Disco");
        discLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        discNameTextField.setToolTipText("Ingrese el nombre del disco");
        discNameTextField.setMaximumSize(new java.awt.Dimension(2147, 21474));
        discNameTextField.setPreferredSize(new java.awt.Dimension(200, 22));
        discNameTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                discNameTextFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                discNameTextFieldFocusLost(evt);
            }
        });
        discNameTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                discNameTextFieldKeyTyped(evt);
            }
        });

        discNameWarningLabel.setFont(new java.awt.Font("Arial Unicode MS", 2, 12)); // NOI18N
        discNameWarningLabel.setForeground(new java.awt.Color(255, 0, 0));
        discNameWarningLabel.setText("Error");

        artistLabel.setText("Artista");

        artistNameTextField.setToolTipText("Ingrese el nombre del artista");
        artistNameTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                artistNameTextFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                artistNameTextFieldFocusLost(evt);
            }
        });
        artistNameTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                artistNameTextFieldKeyTyped(evt);
            }
        });

        artistNameWarningLabel.setFont(new java.awt.Font("Arial Unicode MS", 2, 12)); // NOI18N
        artistNameWarningLabel.setForeground(new java.awt.Color(255, 0, 0));
        artistNameWarningLabel.setText("Error");

        releaseDateLabel.setText("Fecha de lanzamiento");

        numberOfSongsLabel.setText("N° de canciones");

        numberOfSongsTextField.setToolTipText("Ingrese el numero de canciones");
        numberOfSongsTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                numberOfSongsTextFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                numberOfSongsTextFieldFocusLost(evt);
            }
        });
        numberOfSongsTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                numberOfSongsTextFieldKeyTyped(evt);
            }
        });

        numberOfSongsWarningLabel.setFont(new java.awt.Font("Arial Unicode MS", 2, 12)); // NOI18N
        numberOfSongsWarningLabel.setForeground(new java.awt.Color(255, 0, 0));
        numberOfSongsWarningLabel.setText("Error");

        discTypeLabel.setText("Tipo de disco");

        discTypeComboBox.setToolTipText("Escoja el tipo de disco");
        discTypeComboBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                discTypeComboBoxFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                discTypeComboBoxFocusLost(evt);
            }
        });
        discTypeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                discTypeComboBoxActionPerformed(evt);
            }
        });

        discTypeWarningLabel.setFont(new java.awt.Font("Arial Unicode MS", 2, 12)); // NOI18N
        discTypeWarningLabel.setForeground(new java.awt.Color(255, 0, 0));
        discTypeWarningLabel.setText("Error");

        priceLabel.setText("Precio");

        priceTextField.setToolTipText("Ingrese el precio del disco");
        priceTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                priceTextFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                priceTextFieldFocusLost(evt);
            }
        });
        priceTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                priceTextFieldKeyTyped(evt);
            }
        });

        priceWarningLabel.setFont(new java.awt.Font("Arial Unicode MS", 2, 12)); // NOI18N
        priceWarningLabel.setForeground(new java.awt.Color(255, 0, 0));
        priceWarningLabel.setText("Error");

        stockLabel.setText("Stock");

        stockTextField.setToolTipText("Ingrese las unidades existentes del disco");
        stockTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                stockTextFieldFocusLost(evt);
            }
        });
        stockTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                stockTextFieldKeyTyped(evt);
            }
        });

        stockWarningLabel.setFont(new java.awt.Font("Arial Unicode MS", 2, 12)); // NOI18N
        stockWarningLabel.setForeground(new java.awt.Color(255, 0, 0));
        stockWarningLabel.setText("Error");

        registerButton.setText("Registrar");

        cleanFieldsButton.setText("Limpiar");
        cleanFieldsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cleanFieldsButtonActionPerformed(evt);
            }
        });

        releaseDateWarningLabel.setFont(new java.awt.Font("Arial Unicode MS", 2, 12)); // NOI18N
        releaseDateWarningLabel.setForeground(new java.awt.Color(255, 0, 0));
        releaseDateWarningLabel.setText("Error");

        jCalendar1.setMaxSelectableDate(new java.util.Date(253370779302000L));
        jCalendar1.setMinSelectableDate(new java.util.Date(-2556039498000L));

        javax.swing.GroupLayout musicRecordPanelLayout = new javax.swing.GroupLayout(musicRecordPanel);
        musicRecordPanel.setLayout(musicRecordPanelLayout);
        musicRecordPanelLayout.setHorizontalGroup(
            musicRecordPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(musicRecordPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(musicRecordPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(musicRecordPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(numberOfSongsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(discLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(artistLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(discTypeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(priceLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(stockLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 5, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(musicRecordPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(musicRecordPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(artistNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(discNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(numberOfSongsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(discTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(musicRecordPanelLayout.createSequentialGroup()
                            .addGap(1, 1, 1)
                            .addGroup(musicRecordPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(discTypeWarningLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(musicRecordPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(priceWarningLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(stockWarningLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(artistNameWarningLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(discNameWarningLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addComponent(numberOfSongsWarningLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(priceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(stockTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(musicRecordPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(releaseDateLabel)
                    .addGroup(musicRecordPanelLayout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(musicRecordPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(releaseDateWarningLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(musicRecordPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(musicRecordPanelLayout.createSequentialGroup()
                                    .addComponent(cleanFieldsButton)
                                    .addGap(18, 18, 18)
                                    .addComponent(registerButton))
                                .addComponent(jCalendar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(44, Short.MAX_VALUE))
        );
        musicRecordPanelLayout.setVerticalGroup(
            musicRecordPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(musicRecordPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(musicRecordPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(musicRecordPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(discLabel)
                        .addComponent(releaseDateLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                    .addComponent(discNameTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(musicRecordPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(musicRecordPanelLayout.createSequentialGroup()
                        .addComponent(jCalendar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(releaseDateWarningLabel))
                    .addGroup(musicRecordPanelLayout.createSequentialGroup()
                        .addComponent(discNameWarningLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(musicRecordPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(artistLabel)
                            .addComponent(artistNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(artistNameWarningLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(musicRecordPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(numberOfSongsLabel)
                            .addComponent(numberOfSongsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(numberOfSongsWarningLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(musicRecordPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(discTypeLabel)
                            .addComponent(discTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(discTypeWarningLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(musicRecordPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(priceLabel)
                            .addComponent(priceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(priceWarningLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(musicRecordPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(stockLabel)
                            .addComponent(stockTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(stockWarningLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(musicRecordPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(registerButton)
                    .addComponent(cleanFieldsButton))
                .addGap(15, 15, 15))
            .addComponent(jSeparator2)
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        fileMenu.setText("Archivo");
        menuBar.add(fileMenu);

        EditMenu.setText("Editar");

        findDataEditMenu.setText("Buscar por");

        editFindByDiscMenu.setText("Nombre del disco");
        findDataEditMenu.add(editFindByDiscMenu);

        editFindByArtistMenu.setText("Nombre del artista");
        findDataEditMenu.add(editFindByArtistMenu);

        editFindByDiscTypeMenu.setText("Tipo de disco");
        findDataEditMenu.add(editFindByDiscTypeMenu);

        editFindByCustomMenu.setText("Personalizado");
        findDataEditMenu.add(editFindByCustomMenu);

        EditMenu.add(findDataEditMenu);

        menuBar.add(EditMenu);

        deleteMenu.setText("Eliminar");

        findDataDeleteMenu.setText("Buscar por");

        deleteFindByDiscMenu.setText("Nombre del disco");
        findDataDeleteMenu.add(deleteFindByDiscMenu);

        deleteFindByArtistMenu.setText("Nombre del artista");
        findDataDeleteMenu.add(deleteFindByArtistMenu);

        deleteFindByDiscTypeMenu.setText("Tipo de disco");
        findDataDeleteMenu.add(deleteFindByDiscTypeMenu);

        deleteFindByCustomMenu.setText("Personalizado");
        findDataDeleteMenu.add(deleteFindByCustomMenu);

        deleteMenu.add(findDataDeleteMenu);

        menuBar.add(deleteMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(musicRecordPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(musicRecordPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void discTypeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_discTypeComboBoxActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_discTypeComboBoxActionPerformed

    private void discNameTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_discNameTextFieldFocusLost
        // TODO add your handling code here:
        String discNameText = discNameTextField.getText();
        if(!validString(discNameText)){
            discNameWarningLabel.setText("Este campo es obligatorio ");
        }
    }//GEN-LAST:event_discNameTextFieldFocusLost

    private void discNameTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_discNameTextFieldFocusGained
        // TODO add your handling code here:
        discNameWarningLabel.setText("");
    }//GEN-LAST:event_discNameTextFieldFocusGained

    private void artistNameTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_artistNameTextFieldFocusLost
        // TODO add your handling code here:
        String artistNameText = artistNameTextField.getText();
        if(!validString(artistNameText)){
            artistNameWarningLabel.setText("Este campo es obligatorio");
        }
    }//GEN-LAST:event_artistNameTextFieldFocusLost

    private void artistNameTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_artistNameTextFieldFocusGained
        // TODO add your handling code here:
        artistNameWarningLabel.setText("");
    }//GEN-LAST:event_artistNameTextFieldFocusGained

    private void numberOfSongsTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_numberOfSongsTextFieldFocusLost
        // TODO add your handling code here:
        String numberOfSongsText = numberOfSongsTextField.getText();
        if(!validString(numberOfSongsText)){
            numberOfSongsWarningLabel.setText("Este campo es obligatorio");
        }else{
            int numberOfSongsData = parseInt(numberOfSongsTextField.getText());
            if(!validInt(numberOfSongsData)){
                numberOfSongsWarningLabel.setText("Este campo es obligatorio");
            }    
        }
    }//GEN-LAST:event_numberOfSongsTextFieldFocusLost

    private void numberOfSongsTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_numberOfSongsTextFieldFocusGained
        // TODO add your handling code here:
        numberOfSongsWarningLabel.setText("");
    }//GEN-LAST:event_numberOfSongsTextFieldFocusGained

    private void discTypeComboBoxFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_discTypeComboBoxFocusLost
        // TODO add your handling code here:
        int listDiscTypeIndex = discTypeComboBox.getSelectedIndex();
        if(!validInt(listDiscTypeIndex)){
            discTypeWarningLabel.setText("Este campo es obligatorio");
        }  
    }//GEN-LAST:event_discTypeComboBoxFocusLost

    private void discTypeComboBoxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_discTypeComboBoxFocusGained
        // TODO add your handling code here:
        discTypeWarningLabel.setText("");
    }//GEN-LAST:event_discTypeComboBoxFocusGained

    private void priceTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_priceTextFieldFocusLost
        // TODO add your handling code here:
        String priceText = priceTextField.getText();
        if(!validString(priceText)){
            priceWarningLabel.setText("Este campo es obligatorio");
        }else{
            int priceData = parseInt(priceTextField.getText());
            if(!validInt(priceData)){
                priceWarningLabel.setText("El dato ingresado no es permitido");
            }    
        }
    }//GEN-LAST:event_priceTextFieldFocusLost

    private void priceTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_priceTextFieldFocusGained
        // TODO add your handling code here:
        priceWarningLabel.setText("");
    }//GEN-LAST:event_priceTextFieldFocusGained

    private void stockTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_stockTextFieldFocusLost
        // TODO add your handling code here:
        String stockText = priceTextField.getText();
        if(!validString(stockText)){
            stockWarningLabel.setText("Este campo es obligatorio");
        }else{
            int stockData = parseInt(stockTextField.getText());
            if(!validInt(stockData)){
                stockWarningLabel.setText("El dato ingresado no es permitido");
            }    
        }
        
    }//GEN-LAST:event_stockTextFieldFocusLost

    private void discNameTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_discNameTextFieldKeyTyped
        // TODO add your handling code here:
        listKeyCount[0] ++;
        char c = evt.getKeyChar();
        boolean backSpacePressed = c == VK_BACK_SPACE;
        boolean deletePressed = c == VK_DELETE;
        if(listKeyCount[0] == 50 || discNameTextField.getText().length() >= 50){
            evt.consume();
            discNameWarningLabel.setText("No puedes ingresar mas de 50 caracteres");
        }
        if(backSpacePressed || deletePressed){
            listKeyCount[0] = discNameTextField.getText().length();
            discNameWarningLabel.setText("");
            discNameTextFieldKeyTyped(evt);
        }
    }//GEN-LAST:event_discNameTextFieldKeyTyped

    private void numberOfSongsTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_numberOfSongsTextFieldKeyTyped
        // TODO add your handling code here:
        prohibitedNoNumerics(evt, numberOfSongsTextField, 2);
        if(intInputHandler(evt , 2)){
            numberOfSongsWarningLabel.setText("No se permiten numeros tan grandes");
        }
    }//GEN-LAST:event_numberOfSongsTextFieldKeyTyped

    private void priceTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_priceTextFieldKeyTyped
        // TODO add your handling code here:
        prohibitedNoNumerics(evt, priceTextField, 3);
        if(intInputHandler(evt , 3)){
            priceWarningLabel.setText("No se permiten numeros tan grandes");
        }
    }//GEN-LAST:event_priceTextFieldKeyTyped

    private void stockTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_stockTextFieldKeyTyped
        // TODO add your handling code here:
        prohibitedNoNumerics(evt, stockTextField, 4);
        if(intInputHandler(evt ,4)){
            stockWarningLabel.setText("No se permiten numeros tan grandes");
        }
    }//GEN-LAST:event_stockTextFieldKeyTyped

    private void artistNameTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_artistNameTextFieldKeyTyped
        // TODO add your handling code here:
        listKeyCount[1] ++;
        char c = evt.getKeyChar();
        boolean backSpacePressed = c == VK_BACK_SPACE;
        boolean deletePressed = c == VK_DELETE;
        if(listKeyCount[1] >= 50){
            evt.consume();
            artistNameWarningLabel.setText("No puedes ingresar mas de 50 caracteres");
        }
        if(backSpacePressed || deletePressed){
            listKeyCount[1] = artistNameTextField.getText().length();
            artistNameWarningLabel.setText("");
        }
        
    }//GEN-LAST:event_artistNameTextFieldKeyTyped

    private void cleanFieldsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cleanFieldsButtonActionPerformed
        // TODO add your handling code here:
        discNameTextField.setText("");
        artistNameTextField.setText("");
        numberOfSongsTextField.setText("");
        discTypeComboBox.setSelectedIndex(0);
        priceTextField.setText("");
        stockTextField.setText("");
        print("Limpie los campos");
    }//GEN-LAST:event_cleanFieldsButtonActionPerformed

    private void jCheckBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox3ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox1ActionPerformed
      
    private void prohibitedNoNumerics(KeyEvent evt, JTextField text, int position){
        char c = evt.getKeyChar();
        boolean nonEssentialKeys = c != VK_BACK_SPACE && c != VK_DELETE && c != VK_TAB;
        if (!isDigit(c) && nonEssentialKeys) {
            evt.consume();
            print("Prohibí no-numericos donde estos no corresponde");
            
        }else if(!nonEssentialKeys){
            listKeyCount[position] = text.getText().length();
        }else{
            listKeyCount[position]++;
        }          
    }
    
    private boolean intInputHandler(KeyEvent evt ,int position){
        if(listKeyCount[position] > 9){
            evt.consume();
            print("Prohibí un int fuera de rango");
            return true;
        }
        print(""+listKeyCount[position]);
        return false;
    }
    
    
    private void print(String text){
        out.println(text);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            getLogger(MusicRecordFrame.class.getName()).log(SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        invokeLater(() -> {
            new MusicRecordFrame().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu EditMenu;
    private javax.swing.JLabel artistLabel;
    private javax.swing.JTextField artistNameTextField;
    private javax.swing.JLabel artistNameWarningLabel;
    private javax.swing.JButton cleanFieldsButton;
    private javax.swing.JMenuItem deleteFindByArtistMenu;
    private javax.swing.JMenuItem deleteFindByCustomMenu;
    private javax.swing.JMenuItem deleteFindByDiscMenu;
    private javax.swing.JMenuItem deleteFindByDiscTypeMenu;
    private javax.swing.JMenu deleteMenu;
    private javax.swing.JLabel discLabel;
    private javax.swing.JTextField discNameTextField;
    private javax.swing.JLabel discNameWarningLabel;
    private javax.swing.JComboBox<String> discTypeComboBox;
    private javax.swing.JLabel discTypeLabel;
    private javax.swing.JLabel discTypeWarningLabel;
    private javax.swing.JMenuItem editFindByArtistMenu;
    private javax.swing.JMenuItem editFindByCustomMenu;
    private javax.swing.JMenuItem editFindByDiscMenu;
    private javax.swing.JMenuItem editFindByDiscTypeMenu;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JFrame findByWindowFrame;
    private javax.swing.JMenu findDataDeleteMenu;
    private javax.swing.JMenu findDataEditMenu;
    private com.toedter.calendar.JCalendar jCalendar1;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JCheckBox jCheckBox6;
    private javax.swing.JCheckBox jCheckBox7;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList<String> jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JToggleButton jToggleButton2;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JPanel musicRecordPanel;
    private javax.swing.JLabel numberOfSongsLabel;
    private javax.swing.JTextField numberOfSongsTextField;
    private javax.swing.JLabel numberOfSongsWarningLabel;
    private javax.swing.JLabel priceLabel;
    private javax.swing.JTextField priceTextField;
    private javax.swing.JLabel priceWarningLabel;
    private javax.swing.JButton registerButton;
    private javax.swing.JLabel releaseDateLabel;
    private javax.swing.JLabel releaseDateWarningLabel;
    private javax.swing.JLabel stockLabel;
    private javax.swing.JTextField stockTextField;
    private javax.swing.JLabel stockWarningLabel;
    // End of variables declaration//GEN-END:variables
}
